CREATE TABLE IF NOT EXISTS users
(
    id    BIGINT       NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    name  VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS locations
(
    id     BIGINT  NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat    DECIMAL NOT NULL,
    lon    DECIMAL NOT NULL,
    radius DECIMAL NOT NULL,
    name   VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     BIGINT      NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title  VARCHAR(50) NOT NULL,
    pinned BOOLEAN     NOT NULL
);

CREATE TABLE IF NOT EXISTS categories
(
    id   BIGINT       NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS events
(
    id                 BIGINT                      NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title              VARCHAR(120)                NOT NULL,
    annotation         VARCHAR(2000)               NOT NULL,
    description        VARCHAR(7000)               NOT NULL,
    created_date       TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_date         TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    published_date     TIMESTAMP WITHOUT TIME ZONE,
    participant_limit  INTEGER                     NOT NULL,
    paid               BOOLEAN                     NOT NULL,
    request_moderation BOOLEAN                     NOT NULL,
    state              VARCHAR(50)                 NOT NULL,
    location_id        INTEGER REFERENCES locations (id),
    initiator_id       INTEGER REFERENCES users (id),
    category_id        INTEGER REFERENCES categories (id)
);

CREATE TABLE IF NOT EXISTS compilation_events
(
    id             BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id       INTEGER REFERENCES events (id),
    compilation_id INTEGER REFERENCES compilations (id)
);

CREATE TABLE IF NOT EXISTS requests
(
    id           BIGINT                      NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status       VARCHAR(255)                NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_id     INTEGER REFERENCES events (id),
    user_id      INTEGER REFERENCES users (id)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist      float = 0;
        rad_lat1  float;
        rad_lat2  float;
        theta     float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN
                dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;


